  import { useState } from "react";
  import {
    ChevronDown,
    ChevronRight,
    Folder,
    File,
    EditIcon,
  } from "lucide-react";

  import { Button } from "@/components/ui/button";
  import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
  } from "@/components/ui/table";
  import { formatNumber } from "@/lib/number-utils";

  // Tipo para os itens da árvore
  type TreeItem = {
    id: string;
    name: string;
    quantity?: number;
    totalValue?: number;
    children?: TreeItem[];
  };

  // Dados de exemplo
  const treeData: TreeItem[] = [
    {
      id: "12025",
      name: "JAN/25",
      totalValue: 100,
      quantity: 0,
      children: [
        {
          id: "GER_1",
          name: "FABIO",
          totalValue: 100,
          quantity: 0,
          children: [
            {
              id: "REP_1",
              name: "33 - NOIA",
              totalValue: 100,
              quantity: 0,
              children: [
                {
                  id: "CG_1",
                  name: "CONCESSIONÁRIAS",
                  totalValue: 100,
                  quantity: 0,
                  children: [
                    {
                      id: "PG_1",
                      name: "BAGS",
                      totalValue: 100,
                      quantity: 100,
                      children: [
                        {
                          id: "PCF_1",
                          name: "BAGS",
                          totalValue: 100,
                          quantity: 100,
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  ];

  export function GoalsTable() {
    // Estado para controlar quais itens estão expandidos
    const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());

    // Função para alternar a expansão de um item
    const toggleExpand = (itemId: string) => {
      const newExpandedItems = new Set(expandedItems);
      if (newExpandedItems.has(itemId)) {
        newExpandedItems.delete(itemId);
      } else {
        newExpandedItems.add(itemId);
      }
      setExpandedItems(newExpandedItems);
    };

    // Função recursiva para renderizar os itens da árvore
    const renderTreeItems = (items: TreeItem[], level = 0) => {
      return items.flatMap((item) => {
        const isExpanded = expandedItems.has(item.id);
        const hasChildren = item.children && item.children.length > 0;

        const rows = [
          <TableRow key={item.id} className="even:bg-neutral-50">
            <TableCell className="font-medium">
              <div className="flex items-center">
                <span
                  style={{ marginLeft: `${level * 20}px` }}
                  className="flex items-center"
                >
                  {hasChildren ? (
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-6 w-6"
                      onClick={() => toggleExpand(item.id)}
                    >
                      {isExpanded ? (
                        <ChevronDown className="h-4 w-4" />
                      ) : (
                        <ChevronRight className="h-4 w-4" />
                      )}
                    </Button>
                  ) : (
                    <span className="w-6" />
                  )}

                  <Folder className="h-4 w-4 mr-2 text-blue-500" />

                  {item.name}
                </span>
              </div>
            </TableCell>
            <TableCell className="text-right  border-l">
              {item.quantity || ""}
            </TableCell>
            <TableCell className="text-right  border-l">
              {formatNumber(item.totalValue, 2)}
            </TableCell>
            <TableCell className="pl-4 border-l">
              {!item.children && (
                <Button variant="blue">
                  <EditIcon className="size-4" />
                </Button>
              )}
            </TableCell>
          </TableRow>,
        ];

        // Se o item estiver expandido e tiver filhos, renderize-os também
        if (isExpanded && hasChildren) {
          rows.push(...renderTreeItems(item.children!, level + 1));
        }

        return rows;
      });
    };

    return (
      <div className="rounded-md border">
        <Table className="w-full">
          <TableHeader className="bg-gray-200">
            <TableRow>
              <TableHead className="px-2 py-3 text-left text-xs font-semibold text-black uppercase tracking-wider border border-neutral-300 relative h-fit">
                Período / Gerente Comercial / Representante / Grupo de Cliente /
                Grupo de Estoque / Família Comercial
              </TableHead>
              <TableHead className="px-2 py-3 text-left text-xs font-semibold text-black uppercase tracking-wider border border-neutral-300 relative h-fit">
                Quantidade
              </TableHead>
              <TableHead className="px-2 py-3 text-left text-xs font-semibold text-black uppercase tracking-wider border border-neutral-300 relative h-fit">
                Valor
              </TableHead>
              <TableHead className="px-2 py-3 text-left text-xs font-semibold text-black uppercase tracking-wider border border-neutral-300 relative h-fit">
                Ações
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>{renderTreeItems(treeData)}</TableBody>
        </Table>
      </div>
    );
  }
